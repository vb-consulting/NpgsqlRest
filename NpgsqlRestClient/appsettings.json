/*
  Client version 2.27.1.0
*/
{
  //
  // The application name used to set the application name property in connection string by "NpgsqlRest.SetApplicationNameInConnection" or the "NpgsqlRest.UseJsonApplicationName" settings.
  // It is the name of the top-level directory if set to null.
  //
  "ApplicationName": null,

  //
  // Production or Development
  //
  "EnvironmentName": "Production",

  //
  // Specify the urls the web host will listen on. See https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.hosting.hostingabstractionswebhostbuilderextensions.useurls?view=aspnetcore-8.0
  //
  "Urls": "http://localhost:8080",
  
  //
  // Logs at startup, placeholders:
  // {0} - startup time
  // {1} - listening on urls
  // {2} - current version
  // {3} - EnvironmentName
  // {4} - ApplicationName
  //
  "StartupMessage": "Started in {0}, listening on {1}, version {2}",
  
  //
  // Configuration settings
  //
  "Config": {
    //
    // Expose current configuration to the endpoint for debugging and inspection. Note, the password in the connection string is not exposed.
    //
    // "ExposeAsEndpoint": "/config"
    "ExposeAsEndpoint": null,
    //
    // Add the environment variables to configuration first.
    //
    "AddEnvironmentVariables": false
  },

  "ConnectionStrings": {
    //
    // See https://www.npgsql.org/doc/connection-string-parameters.html
    //
    "Default": ""
  },

  "ConnectionSettings": {
    //
    // When connection string is defined in ConnectionStrings section, this option will enable to format environment variables using curly braces format.
    // For example "Host={PGHOST};Database={PGDB};" will replace {PGHOST} and {PGDB} placeholders with appropriate values of PGHOST and PGDB environment variables when available.
    //
    "ParseConnectionStringWithEnvVars": false,
    //
    // Use the environment variables to set the connection string parameters. Default environment variables are defined below.
    //
    // Connection parameters will be set from the environment variables if this option is enabled and the environment variables are set.
    // Note: When this option is enabled and these environment variables are set, connection string doesn't have to be defined at all, and it will be created from the environment variables.
    //
    "UseEnvVars": false,
    //
    // When UseEnvVars is set to true, try to match environment variable names with Npgsql Connection String Parameter Names (https://www.npgsql.org/doc/connection-string-parameters.html).
    // This value is a string format placeholder for the connection string parameter name in upper snake case.
    // For example, parameter name "SSL Password" would be matched for environment variable name "SSL_PASSWORD".
    // Use the string format placeholder to add additional prefixes or suffixes, like "SERVICE1_{0}" to match "SSL Password" for "SERVICE1_SSL_PASSWORD" environment variable.
    // If second placeholder is used, {0} will be the connection string parameter name in upper snake case, and {1} will be the connection string parameter name in upper snake case.
    //
    // Set to null or empty string to ignore.
    //
    "MatchNpgsqlConnectionParameterNamesWithEnvVarNames": "NGPSQLREST_{0}_{1}",
    //
    // If connection string parameter is set, the environment variables will be used to override the connection string parameters.
    // When this option is disabled (false), connection parameters will be set from environment variables only if the connection string parameter is not set.
    //
    "EnvVarsOverride": false,
    //
    // Name of the host environment variable.
    //
    "HostEnvVar": "PGHOST",
    //
    // Name of the port environment variable.
    //
    "PortEnvVar": "PGPORT",
    //
    // Name of the database environment variable.
    //
    "DatabaseEnvVar": "PGDATABASE",
    //
    // The username to use for the connection string parameters.
    //
    "UserEnvVar": "PGUSER",
    //
    // Name of the password environment variable.
    //
    "PasswordEnvVar": "PGPASSWORD",
    //
    // Sets the ApplicationName connection property in the connection string to the value of the ApplicationName configuration.
    // Note: This option is ignored if the UseJsonApplicationName option is enabled.
    //
    "SetApplicationNameInConnection": true,
    //
    // Sets the ApplicationName connection property dynamically on every request in the following format: 
    // {"app": [Application Name], "uid": [UserId for authenticated users or NULL], "id": [Value of X-Execution-Id request header or NULL]}
    // Note: The ApplicationName connection property is limited to 64 characters.
    //
    "UseJsonApplicationName": false,
    //
    // Test any connection string before initializing the application and using it. The connection string is tested by opening and closing the connection.
    //
    "TestConnectionStrings": true,
    //
    // Connection open retry options.
    //
    "RetryOptions": {
      "Enabled": true,
      //
      // Maximum number of retry attempts.
      //
      "MaxRetryCount": 6,
      //
      // Maximum delay between retry attempts in seconds.
      //
      "MaxRetryDelaySeconds": 30,
      //
      // Exponential backoff base multiplier for retry delays.
      //
      "ExponentialBase": 2.0,
      //
      // Random jitter factor (1.1 for 10% jitter, 1.2 for 20% jitter, 1.3 for 30% jitter, etc)
      //
      "RandomFactor": 1.1,
      //
      // Base coefficient for delay calculation in seconds.
      //
      "DelayCoefficientSeconds": 1,
      //
      // Additional list of PostgreSQL error codes to consider retryable beyond the default transient ones.
      //
      "AdditionalErrorCodes": null
    }
  },
  
  //
  // Enable to invoke UseKestrelHttpsConfiguration. See https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.hosting.webhostbuilderkestrelextensions.usekestrelhttpsconfiguration?view=aspnetcore-8.0
  //
  "Ssl": {
    "Enabled": false,
    //
    // Adds middleware for redirecting HTTP Requests to HTTPS. See https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.builder.httpspolicybuilderextensions.usehttpsredirection?view=aspnetcore-8.0
    //
    "HttpsRedirection": true,
    //
    // Adds middleware for using HSTS, which adds the Strict-Transport-Security header. See https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.builder.hstsbuilderextensions.usehsts?view=aspnetcore-2.1
    //
    "UseHsts": true
  },

  //
  // Data protection settings. Encryption/decryption settings for Auth Cookies, Antiforgery tokens and custom data protection needs.
  //
  "DataProtection": {
    "Enabled": true,
    //
    // Set to null to use the current "ApplicationName" value.
    // This value determines encryption type or class. Meaning, different application names will not be able to decrypt each other's data.
    //
    "CustomApplicationName": null,
    //
    // Sets the default lifetime in days of keys created by the data protection system.
    // Represents a number of days how long before keys are rotated.
    //
    "DefaultKeyLifetimeDays": 90,
    //
    // Data protection location: "Default", "FileSystem" or "Database"
    //
    // Note: When running on Linux, using Default location means keys will not be persisted. 
    // When keys are lost on restarts, Encrypted tokens (auth) will also not work on restart.
    // Linux users should use FileSystem or Database storage.
    //
    "Storage": "Default",
    //
    // FileSystem storage path. Set to a valid path when using FileSystem.
    // Note: When running in Docker environment, the path must be a Docker volume path to persist the keys.
    //
    "FileSystemPath": "./data-protection-keys",
    //
    // GetAllElements database command. Expected to return rows with a single column of type text.
    //
    "GetAllElementsCommand": "select get_data_protection_keys()",
    //
    // StoreElement database command. Receives two parameters: name and data of type text. Doesn't return anything.
    //
    "StoreElementCommand": "call store_data_protection_keys($1,$2)",
    //
    // Configure encryption algorithms for data protection keys or null to use the default algorithm.
    // Values: AES_128_CBC, AES_192_CBC, AES_256_CBC, AES_128_GCM, AES_192_GCM, AES_256_GCM
    //
    "EncryptionAlgorithm": null,
    //
    // Configure validation algorithms for data protection keys or null to use the default algorithm.
    // Values: HMACSHA256, HMACSHA512
    //
    "ValidationAlgorithm": null
  },

  //
  // Uncomment to configure Kestrel web server and to add certificates
  // See https://learn.microsoft.com/en-us/aspnet/core/fundamentals/servers/kestrel/endpoints?view=aspnetcore-9.0
  //
  "Kestrel": {
    //  "Endpoints": {
    //    "Http": {
    //      "Url": "http://localhost:5000"
    //    },
    //    "HttpsInlineCertFile": {
    //      "Url": "https://localhost:5001",
    //      "Certificate": {
    //        "Path": "<path to .pfx file>",
    //        "Password": "$CREDENTIAL_PLACEHOLDER$"
    //      }
    //    },
    //    "HttpsInlineCertAndKeyFile": {
    //      "Url": "https://localhost:5002",
    //      "Certificate": {
    //        "Path": "<path to .pem/.crt file>",
    //        "KeyPath": "<path to .key file>",
    //        "Password": "$CREDENTIAL_PLACEHOLDER$"
    //      }
    //    },
    //    "HttpsInlineCertStore": {
    //      "Url": "https://localhost:5003",
    //      "Certificate": {
    //        "Subject": "<subject; required>",
    //        "Store": "<certificate store; required>",
    //        "Location": "<location; defaults to CurrentUser>",
    //        "AllowInvalid": "<true or false; defaults to false>"
    //      }
    //    },
    //    "HttpsDefaultCert": {
    //      "Url": "https://localhost:5004"
    //    }
    //  },
    //  "Certificates": {
    //    "Default": {
    //      "Path": "<path to .pfx file>",
    //      "Password": "$CREDENTIAL_PLACEHOLDER$"
    //    }
    //  },
    //  "Limits": {
    //    "MaxConcurrentConnections": 100,
    //    "MaxConcurrentUpgradedConnections": 100,
    //    "MaxRequestBodySize": 30000000,
    //    "MaxRequestBufferSize": 1048576,
    //    "MaxRequestHeaderCount": 100,
    //    "MaxRequestHeadersTotalSize": 32768,
    //    "MaxRequestLineSize": 8192,
    //    "MaxResponseBufferSize": 65536,
    //    "KeepAliveTimeout": "00:02:00",
    //    "RequestHeadersTimeout": "00:00:30",
    //    "Http2": {
    //      "MaxStreamsPerConnection": 100,
    //      "HeaderTableSize": 4096,
    //      "MaxFrameSize": 16384,
    //      "MaxRequestHeaderFieldSize": 8192,
    //      "InitialConnectionWindowSize": 65535,
    //      "InitialStreamWindowSize": 65535,
    //      "MaxReadFrameSize": 16384,
    //      "KeepAlivePingDelay": "00:00:30",
    //      "KeepAlivePingTimeout": "00:01:00",
    //      "KeepAlivePingPolicy": "WithActiveRequests"
    //    },
    //    "Http3": {
    //      "MaxRequestHeaderFieldSize": 8192
    //    }
    //  },
    //  "DisableStringReuse": false,
    //  "AllowAlternateSchemes": false,
    //  "AllowSynchronousIO": false,
    //  "AllowResponseHeaderCompression": true,
    //  "AddServerHeader": true,
    //  "AllowHostHeaderOverride": false
  },

  //
  // Thread pool configuration settings for optimizing application performance
  //
  "ThreadPool": {
    //
    // Minimum number of worker threads in the thread pool. Set to null to use system defaults.
    //
    "MinWorkerThreads": null,
    //
    // Minimum number of completion port threads. Set to null to use system defaults.
    //
    "MinCompletionPortThreads": null,
    //
    // Maximum number of worker threads in the thread pool. Set to null to use system defaults.
    //
    "MaxWorkerThreads": null,
    //
    // Maximum number of completion port threads. Set to null to use system defaults.
    //
    "MaxCompletionPortThreads": null
  },

  //
  // Authentication and Authorization settings
  //
  "Auth": {
    //
    // Enable Cookie Auth
    //
    "CookieAuth": false,
    //
    // Authentication scheme name for cookie authentication. Set to null to use default.
    //
    "CookieAuthScheme": null,
    //
    // Number of days the cookie remains valid.
    //
    "CookieValidDays": 14,
    //
    // Custom name for the authentication cookie. Set to null to use default.
    //
    "CookieName": null,
    //
    // Path scope for the authentication cookie. Set to null to use default.
    //
    "CookiePath": null,
    //
    // Domain scope for the authentication cookie. Set to null to use default.
    //
    "CookieDomain": null,
    //
    // Allow multiple concurrent sessions for the same user.
    //
    "CookieMultiSessions": true,
    //
    // Make cookie accessible only via HTTP (not JavaScript).
    //
    "CookieHttpOnly": true,
    //
    // Enable Microsoft Bearer Token Auth
    //
    "BearerTokenAuth": false,
    //
    // Authentication scheme name for bearer token authentication. Set to null to use default.
    //
    "BearerTokenAuthScheme": null,
    //
    // Number of hours before bearer token expires.
    //
    "BearerTokenExpireHours": 1,
    // POST { "refresh": "{{refreshToken}}" }
    "BearerTokenRefreshPath": "/api/token/refresh",
    // 
    // Enable external auth providers
    //
    "External": {
      "Enabled": false,
      //
      // sessionStorage key to store the status of the external auth process returned by the signin page.
      // The value is HTTP status code (200 for success, 401 for unauthorized, 403 for forbidden, etc.)
      //
      "BrowserSessionStatusKey": "__external_status",
      //
      // sessionStorage key to store the message of the external auth process returned by the signin page.
      //
      "BrowserSessionMessageKey": "__external_message",
      //
      // Path to the signin page to handle the external auth process. Redirect to this page to start the external auth process.
      // Format placeholder {0} is the provider name in lowercase (google, linkedin, github, etc.)
      //
      "SigninUrl": "/signin-{0}",
      //
      // Sign in page template. Format placeholders {0} is the provider name, {1} is the script to redirect to the external auth provider.
      //
      "SignInHtmlTemplate": "<!DOCTYPE html><html><head><meta charset=\"utf-8\" /><title>Talking To {0}</title></head><body>Loading...{1}</body></html>",
      //
      // URL to redirect after the external auth process is completed. Usually this is resolved from the request automatically. Except when it's not.
      // 
      "RedirectUrl": null,
      //
      // Path to redirect after the external auth process is completed. 
      // 
      "ReturnToPath": "/",
      //
      // Query string key to store the path to redirect after the external auth process is completed.
      // Use this to set dynamic return path. If this query string key is not found, the ReturnToPath value is used.
      // 
      "ReturnToPathQueryStringKey": "return_to",
      //
      // Login command to execute after the external auth process is completed. Parameters:
      //   $1 - external login provider (if param exists)
      //   $2 - external login email (if param exists)
      //   $3 - external login name (if param exists)
      //   $4 - external login json data received (if param exists)
      //   $5 - client browser analytics json data (if param exists)
      // Please use PostgreSQL parameter placeholders for the parameters ($1, $2, $3).
      //
      // The command uses the same rules as the login enabled routine. 
      // See: "NpgsqlRest.LoginPath"
      //
      "LoginCommand": "select * from external_login($1,$2,$3,$4,$5)",
      //
      // Browser client analytics data that will be sent as JSON to external auth command as the 5th parameter if supplied.
      //
      "ClientAnalyticsData": "{timestamp:new Date().toISOString(),timezone:Intl.DateTimeFormat().resolvedOptions().timeZone,screen:{width:window.screen.width,height:window.screen.height,colorDepth:window.screen.colorDepth,pixelRatio:window.devicePixelRatio,orientation:screen.orientation.type},browser:{userAgent:navigator.userAgent,language:navigator.language,languages:navigator.languages,cookiesEnabled:navigator.cookieEnabled,doNotTrack:navigator.doNotTrack,onLine:navigator.onLine,platform:navigator.platform,vendor:navigator.vendor},memory:{deviceMemory:navigator.deviceMemory,hardwareConcurrency:navigator.hardwareConcurrency},window:{innerWidth:window.innerWidth,innerHeight:window.innerHeight,outerWidth:window.outerWidth,outerHeight:window.outerHeight},location:{href:window.location.href,hostname:window.location.hostname,pathname:window.location.pathname,protocol:window.location.protocol,referrer:document.referrer},performance:{navigation:{type:performance.navigation?.type,redirectCount:performance.navigation?.redirectCount},timing:performance.timing?{loadEventEnd:performance.timing.loadEventEnd,loadEventStart:performance.timing.loadEventStart,domComplete:performance.timing.domComplete,domInteractive:performance.timing.domInteractive,domContentLoadedEventEnd:performance.timing.domContentLoadedEventEnd}:null}}",
      //
      // Client IP address that will be added to the client analytics data under this JSON key.
      //
      "ClientAnalyticsIpKey": "ip",
      //
      // External providers
      //
      "Google": {
        //
        // visit https://console.cloud.google.com/apis/ to configure your Google app and get your client id and client secret
        //
        "Enabled": false,
        "ClientId": "",
        "ClientSecret": "",
        "AuthUrl": "https://accounts.google.com/o/oauth2/v2/auth?response_type=code&client_id={0}&redirect_uri={1}&scope=openid profile email&state={2}",
        "TokenUrl": "https://oauth2.googleapis.com/token",
        "InfoUrl": "https://www.googleapis.com/oauth2/v3/userinfo",
        "EmailUrl": null
      },
      "LinkedIn": {
        //
        // visit https://www.linkedin.com/developers/apps/ to configure your LinkedIn app and get your client id and client secret
        //
        "Enabled": false,
        "ClientId": "",
        "ClientSecret": "",
        "AuthUrl": "https://www.linkedin.com/oauth/v2/authorization?response_type=code&client_id={0}&redirect_uri={1}&state={2}&scope=r_liteprofile%20r_emailaddress",
        "TokenUrl": "https://www.linkedin.com/oauth/v2/accessToken",
        "InfoUrl": "https://api.linkedin.com/v2/me",
        "EmailUrl": "https://api.linkedin.com/v2/emailAddress?q=members&projection=(elements//(handle~))"
      },
      "GitHub": {
        //
        // visit https://github.com/settings/developers/ to configure your GitHub app and get your client id and client secret
        //
        "Enabled": false,
        "ClientId": "",
        "ClientSecret": "",
        "AuthUrl": "https://github.com/login/oauth/authorize?client_id={0}&redirect_uri={1}&state={2}&allow_signup=false",
        "TokenUrl": "https://github.com/login/oauth/access_token",
        "InfoUrl": "https://api.github.com/user",
        "EmailUrl": null
      },
      "Microsoft": {
        //
        // visit https://portal.azure.com/#blade/Microsoft_AAD_RegisteredApps/ApplicationsListBlade to configure your Microsoft app and get your client id and client secret
        // Documentation: https://learn.microsoft.com/en-us/entra/identity-platform/
        //
        "Enabled": false,
        "ClientId": "",
        "ClientSecret": "",
        "AuthUrl": "https://login.microsoftonline.com/common/oauth2/v2.0/authorize?response_type=code&client_id={0}&redirect_uri={1}&scope=openid%20profile%20email&state={2}",
        "TokenUrl": "https://login.microsoftonline.com/common/oauth2/v2.0/token",
        "InfoUrl": "https://graph.microsoft.com/oidc/userinfo",
        "EmailUrl": null
      },
      "Facebook": {
        //
        // visit https://developers.facebook.com/apps/ to configure your Facebook app and get your client id and client secret
        // Documentation: https://developers.facebook.com/docs/facebook-login/
        //
        "Enabled": false,
        "ClientId": "",
        "ClientSecret": "",
        "AuthUrl": "https://www.facebook.com/v20.0/dialog/oauth?response_type=code&client_id={0}&redirect_uri={1}&scope=public_profile%20email&state={2}",
        "TokenUrl": "https://graph.facebook.com/v20.0/oauth/access_token",
        "InfoUrl": "https://graph.facebook.com/me?fields=id,name,email",
        "EmailUrl": null
      }
    }
  },

  //
  // Serilog settings
  //
  "Log": {
    //
    // See https://github.com/serilog/serilog/wiki/Configuration-Basics#minimum-level
    // Verbose, Debug, Information, Warning, Error, Fatal.
    //
    "MinimalLevels": {
      "NpgsqlRest": "Information",
      "System": "Warning",
      "Microsoft": "Warning"
    },
    //
    // Enable logging to console output.
    //
    "ToConsole": true,
    //
    // Minimum log level for console output: Verbose, Debug, Information, Warning, Error, Fatal.
    //
    "ConsoleMinimumLevel": "Verbose",
    //
    // Enable logging to file system.
    //
    "ToFile": false,
    //
    // File path for log files.
    //
    "FilePath": "logs/log.txt",
    //
    // Maximum size limit for log files in bytes before rolling to a new file.
    //
    "FileSizeLimitBytes": 30000000,
    //
    // Minimum log level for file output: Verbose, Debug, Information, Warning, Error, Fatal.
    //
    "FileMinimumLevel": "Verbose",
    //
    // Maximum number of log files to retain.
    //
    "RetainedFileCountLimit": 30,
    //
    // Create a new log file when size limit is reached.
    //
    "RollOnFileSizeLimit": true,
    //
    // Enable logging to PostgreSQL database.
    //
    "ToPostgres": false,
    // $1 - log level text, $2 - message text, $3 - timestamp with tz in utc, $4 - exception text or null, $5 - source context
    //
    // PostgreSQL command to execute for database logging. Parameters: $1=level, $2=message, $3=timestamp, $4=exception, $5=source.
    //
    "PostgresCommand": "call log($1,$2,$3,$4,$5)",
    //
    // Minimum log level for PostgreSQL output: Verbose, Debug, Information, Warning, Error, Fatal.
    //
    "PostgresMinimumLevel": "Verbose",
    //
    // See https://github.com/serilog/serilog/wiki/Formatting-Output
    //
    "OutputTemplate": "[{Timestamp:HH:mm:ss.fff} {Level:u3}] {Message:lj} [{SourceContext}]{NewLine}{Exception}"
  },

  //
  // Response compression settings
  //
  "ResponseCompression": {
    //
    // Enable response compression for HTTP responses.
    //
    "Enabled": false,
    //
    // Enable response compression for HTTPS responses.
    //
    "EnableForHttps": false,
    //
    // Use Brotli compression algorithm when supported by client.
    //
    "UseBrotli": true,
    //
    // Use Gzip compression as fallback when Brotli is not supported.
    //
    "UseGzipFallback": true,
    //
    // Compression level: Optimal, Fastest, NoCompression, SmallestSize.
    //
    "CompressionLevel": "Optimal",
    //
    // MIME types to include for compression.
    //
    "IncludeMimeTypes": [
      "text/plain",
      "text/css",
      "application/javascript",
      "text/html",
      "application/xml",
      "text/xml",
      "application/json",
      "text/json",
      "image/svg+xml",
      "font/woff",
      "font/woff2",
      "application/font-woff",
      "application/font-woff2"
    ],
    //
    // MIME types to exclude from compression.
    //
    "ExcludeMimeTypes": []
  },

  //
  // Antiforgery Token Configuration: Protects against Cross-Site Request Forgery (CSRF) attacks by validating unique tokens for state-changing requests (POST, PUT, DELETE, etc.)
  //
  "Antiforgery": {
    "Enabled": false,
    // Use null to use the default cookie name (unique for every request and starts with ".AspNetCore.Antiforgery.")
    "CookieName": null,
    // Name of the hidden form field containing the antiforgery token
    "FormFieldName": "__RequestVerificationToken",
    // HTTP header name where the token can be sent (useful for AJAX requests)
    "HeaderName": "RequestVerificationToken",
    // When true, skips reading tokens from form body (forces header-only validation)
    "SuppressReadingTokenFromFormBody": false,
    // When true, disables automatic X-Frame-Options header generation
    // The X-Frame-Options header helps prevent clickjacking attacks
    // Only set to true if you're handling frame protection elsewhere
    "SuppressXFrameOptionsHeader": false
  },

  //
  // Static files settings 
  //
  "StaticFiles": {
    "Enabled": false,
    "RootPath": "wwwroot",
    //
    // List of static file patterns that will require authorization.
    // File paths are relative to the RootPath property and pattern matching is case-insensitive.
    // Pattern can include wildcards or question marks. For example: *.html, /user/*, etc
    //
    "AuthorizePaths": [],
    "UnauthorizedRedirectPath": "/",
    "UnauthorizedReturnToQueryParameter": "return_to",
    "ParseContentOptions": {
      //
      // Enable or disable the parsing of the static files.
      // When enabled, the static files will be parsed and the tags will be replaced with the values from the claims collection.
      // The tags are in the format: {claimType} where claimType is the name of the claim that will be replaced with the value from the claims collection.
      //
      "Enabled": false,
      //
      // Set to true to cache the parsed files in memory. This will improve the performance of the static files. It only applies to parsed content.
      // Note: caching will occur before parsing, it applies only to templates, not parsed content.
      //
      "CacheParsedFile": true,
      //
      // Headers to be added to the response for static files. Set to null or empty array to ignore.
      //
      "Headers": [ "Cache-Control: no-store, no-cache, must-revalidate", "Pragma: no-cache", "Expires: 0" ],
      //
      // List of static file patterns that will parse the content and replace the tags with the values from the claims collection.
      // File paths are relative to the RootPath property and pattern matching is case-insensitive.
      // Pattern can include wildcards or question marks. For example: *.html, *.htm, *.txt, *.json, *.xml, *.css, *.js
      // 
      "FilePaths": [ "*.html" ],
      //
      // Name of the configured Antiforgery form field name to be used in the static files (see Antiforgery FormFieldName setting).
      //
      "AntiforgeryFieldName": "antiForgeryFieldName",
      //
      // Value of the Antiforgery token if Antiforgery is enabled.
      //
      "AntiforgeryToken": "antiForgeryToken"
    }
  },

  //
  // Cross-origin resource sharing 
  //
  "Cors": {
    //
    // Enable Cross-Origin Resource Sharing (CORS) support.
    //
    "Enabled": false,
    //
    // List of allowed origins for CORS requests. Empty array allows no origins.
    //
    "AllowedOrigins": [],
    //
    // List of allowed HTTP methods for CORS requests.
    //
    "AllowedMethods": [
      "*"
    ],
    //
    // List of allowed headers for CORS requests.
    //
    "AllowedHeaders": [
      "*"
    ],
    //
    // Allow credentials (cookies, authorization headers) in CORS requests.
    //
    "AllowCredentials": true,
    //
    // Maximum age in seconds for preflight request caching (10 minutes).
    //
    "PreflightMaxAgeSeconds": 600
  },

  //
  // NpgsqlRest HTTP Middleware General Configuration
  //
  "NpgsqlRest": {
    //
    // Connection name to be used from the ConnectionStrings section or NULL to use the first available connection string.
    //
    "ConnectionName": null,
    //
    // Allow using multiple connections from the ConnectionStrings section. When set to true, the connection name can be set for individual Routines.
    // Some routines might use the primary database connection string, while others might want to use a read-only connection string from the replica servers.
    //
    "UseMultipleConnections": false,
    //
    // Filter schema names similar to this parameter or `null` to ignore this parameter.
    //
    "SchemaSimilarTo": null,
    //
    // Filter schema names NOT similar to this parameter or `null` to ignore this parameter.
    //
    "SchemaNotSimilarTo": null,
    //
    // List of schema names to be included or `null` to ignore this parameter.
    //
    "IncludeSchemas": null,
    //
    // List of schema names to be excluded or `null` to ignore this parameter.
    //
    "ExcludeSchemas": null,
    //
    // Filter names similar to this parameter or `null` to ignore this parameter.
    //
    "NameSimilarTo": null,
    //
    // Filter names NOT similar to this parameter or `null` to ignore this parameter.
    //
    "NameNotSimilarTo": null,
    //
    // List of names to be included or `null` to ignore this parameter.
    //
    "IncludeNames": null,
    //
    // List of names to be excluded or `null` to ignore this parameter.
    //
    "ExcludeNames": null,
    //
    // Configure how the comment annotations will behave. `Ignore` will create all endpoints and ignore comment annotations. `ParseAll` will create all endpoints and parse comment annotations to alter the endpoint. `OnlyWithHttpTag` (default) will only create endpoints that contain the `HTTP` tag in the comments and then parse comment annotations.
    //
    "CommentsMode": "OnlyWithHttpTag",
    //
    // The URL prefix string for every URL created by the default URL builder or `null` to ignore the URL prefix.
    //
    "UrlPathPrefix": "/api",
    //
    // Convert all URL paths to kebab-case from the original PostgreSQL names.
    //
    "KebabCaseUrls": true,
    //
    // Convert all parameter names to camel case from the original PostgreSQL paramater names.
    //
    "CamelCaseNames": true,
    //
    // When set to true, it will force all created endpoints to require authorization. Authorization requirements for individual endpoints can be changed with the `EndpointCreated` function callback, or by using comment annotations.
    //
    "RequiresAuthorization": true,
    //
    // Log endpoint created events in debug level.
    //
    "LogEndpointCreatedInfo": true,
    //
    // When this value is true, all changes in the endpoint properties that are set from the comment annotations will be logged in debug level.
    //
    "LogAnnotationSetInfo": true,
    //
    // When this value is true, all connection events are logged (depending on the level). This is usually triggered by the PostgreSQL RAISE statements. 
    // Set to false to turn off logging these events.
    //
    "LogConnectionNoticeEvents": true,
    //
    // MessageOnly - Log only connection messages. FirstStackFrameAndMessage - Log first stack frame and the message. FullStackAndMessage - Log full stack trace and message.
    //
    "LogConnectionNoticeEventsMode": "FirstStackFrameAndMessage",
    //
    // Set this option to true to log information for every executed command and query (including parameters and parameter values) in debug level.
    //
    "LogCommands": false,
    //
    // Set this option to true to include parameter values when logging commands. This only applies when `LogCommands` is true.
    //
    "LogCommandParameters": false,
    //
    // Sets the wait time (in seconds) on database commands, before terminating the attempt to execute a command and generating an error. This value when it is not null will override the `NpgsqlCommand` which is 30 seconds. Command timeout property for individual endpoints can be changed with the `EndpointCreated` function callback, or by using comment annotations.
    //
    "CommandTimeout": null,
    //
    // When not null, forces a method type for all created endpoints. Method types are `GET`, `PUT`, `POST`, `DELETE`, `HEAD`, `OPTIONS`, `TRACE`, `PATCH` or `CONNECT`. When this value is null (default), the method type is always `GET` when the routine volatility option is not volatile or the routine name starts with, `get_`, contains `_get_` or ends with `_get` (case-insensitive). Otherwise, it is `POST`. This option for individual endpoints can be changed with the `EndpointCreated` function callback, or by using comment annotations.
    //
    "DefaultHttpMethod": null,
    //
    // When not null, sets the request parameter position (request parameter types) for all created endpoints. Values are `QueryString` (parameters are sent using query string) or `BodyJson` (parameters are sent using JSON request body). When this value is null (default), request parameter type is `QueryString` for all `GET` and `DELETE` endpoints, otherwise, request parameter type is `BodyJson`. This option for individual endpoints can be changed with the `EndpointCreated` function callback, or by using comment annotations.
    //
    "DefaultRequestParamType": null,
    //
    // Configure how to send request headers to PostgreSQL routines execution: `Ignore` (default) don't send any request headers to routines. `Context` sets a context variable for the current session `context.headers` containing JSON string with current request headers. This executes `set_config('context.headers', headers, false)` before any routine executions. `Parameter` sends request headers to the routine parameter defined with the `RequestHeadersParameterName` option. Parameter with this name must exist, must be one of the JSON or text types and must have the default value defined. This option for individual endpoints can be changed with the `EndpointCreated` function callback, or by using comment annotations.
    //
    "RequestHeadersMode": "Ignore",
    //
    // Name of the context variable that will receive the request headers when RequestHeadersMode is set to Context.
    //
    "RequestHeadersContextKey": "request.headers",
    //
    // Sets a parameter name that will receive a request headers JSON when the `Parameter` value is used in `RequestHeadersMode` options. A parameter with this name must exist, must be one of the JSON or text types and must have the default value defined. This option for individual endpoints can be changed with the `EndpointCreated` function callback, or by using comment annotations.
    //
    "RequestHeadersParameterName": "_headers",
    //
    // Set to true to return message from NpgsqlException on response body. Default is true.
    //
    "ReturnNpgsqlExceptionMessage": true,
    //
    // Map PostgreSql Error Codes (see https://www.postgresql.org/docs/current/errcodes-appendix.html) to HTTP Status Codes. Default is 57014 query_canceled to 205 Reset Content.
    //
    "PostgreSqlErrorCodeToHttpStatusCodeMapping": {
      "57014": 205,
      "P0001": 400, // PL/pgSQL raise exception
      "P0004": 400 // PL/pgSQL assert failure
    },
    //
    // Add the unique NpgsqlRest instance id request header with this name to the response or set to null to ignore.
    //
    "InstanceIdRequestHeaderName": null,
    //
    // Custom request headers dictionary that will be added to NpgsqlRest requests. Note: these values are added to the request headers dictionary before they are sent as a context or parameter to the PostgreSQL routine and as such not visible to the browser debugger.
    //
    "CustomRequestHeaders": {
    },
    //
    // Name of the request ID header that will be used to track requests. This is used to correlate requests with server event streaming connection ids.
    //
    "ExecutionIdHeaderName": "X-NpgsqlRest-ID",
    //
    // Collection of custom server-sent events response headers that will be added to the response when connected to the endpoint that is configured to return server-sent events.
    //
    "CustomServerSentEventsResponseHeaders": {
    },
    //
    // Options for handling PostgreSQL routines (functions and procedures)
    //
    "RoutineOptions": {
      //
      // Name separator for parameter names when using custom type parameters. 
      // Parameter names will be in the format: {ParameterName}{CustomTypeParameterSeparator}{CustomTypeFieldName}. When NULL, default underscore is used.
      // This is used when using custom types for parameters. For example: with "create type custom_type1 as (value text);" and parameter "_p custom_type1", this name will be merged into "_p_value"
      //
      "CustomTypeParameterSeparator": null,
      //
      // List of PostgreSQL routine language names to include. If NULL, all languages are included. Names are case-insensitive.
      //
      "IncludeLanguages": null,
      //
      // List of PostgreSQL routine language names to exclude. If NULL, "C" and "INTERNAL" are excluded by default. Names are case-insensitive.
      //
      "ExcludeLanguages": null
    },

    //
    // Options for different upload handlers and general upload settings
    //
    "UploadOptions": {
      "Enabled": false,
      "LogUploadEvent": true,
      "LogUploadParameters": false,
      //
      // Handler that will be used when upload handler or handlers are not specified.
      //
      "DefaultUploadHandler": "large_object",
      //
      // Gets or sets a value indicating whether the default upload metadata parameter should be used.
      //
      "UseDefaultUploadMetadataParameter": false,
      //
      // Name of the default upload metadata parameter. This parameter is used to pass metadata to the upload handler. The metadata is passed as a JSON object.
      //
      "DefaultUploadMetadataParameterName": "_upload_metadata",
      //
      // Gets or sets a value indicating whether the default upload metadata context key should be used.
      //
      "UseDefaultUploadMetadataContextKey": false,
      //
      // Name of the default upload metadata context key. This key is used to pass the metadata to the upload handler. The metadata is passed as a JSON object.
      //
      "DefaultUploadMetadataContextKey": "request.upload_metadata",
      //
      // Upload handlers specific settings.
      //
      "UploadHandlers": {
        //
        // General settings for all upload handlers
        //
        "StopAfterFirstSuccess": false,
        // csv string containing mime type patters, set to null to ignore
        "IncludedMimeTypePatterns": null,
        // csv string containing mime type patters, set to null to ignore
        "ExcludedMimeTypePatterns": null,
        "BufferSize": 8192, // Buffer size for the upload handlers file_system and large_object, in bytes. Default is 8192 bytes (8 KB).
        "TextTestBufferSize": 4096, // Buffer sample size for testing textual content, in bytes. Default is 4096 bytes (4 KB).
        "TextNonPrintableThreshold": 5, // Threshold for non-printable characters in the text buffer. Default is 5 non-printable characters.
        "AllowedImageTypes": "jpeg, png, gif, bmp, tiff, webp", // Comma-separated list of allowed image types when checking images.
        //
        // Enables upload handlers for the NpgsqlRest endpoints that uses PostgreSQL Large Objects API
        //
        "LargeObjectEnabled": true,
        "LargeObjectKey": "large_object",
        "LargeObjectCheckText": false,
        "LargeObjectCheckImage": false,
        //
        // Enables upload handlers for the NpgsqlRest endpoints that uses file system
        //
        "FileSystemEnabled": true,
        "FileSystemKey": "file_system",
        "FileSystemPath": "/tmp/uploads",
        "FileSystemUseUniqueFileName": true,
        "FileSystemCreatePathIfNotExists": true,
        "FileSystemCheckText": false,
        "FileSystemCheckImage": false,
        //
        // Enables upload handlers for the NpgsqlRest endpoints that uploads CSV files to a row command
        //
        "CsvUploadEnabled": true,
        "CsvUploadCheckFileStatus": true,
        "CsvUploadDelimiterChars": ",",
        "CsvUploadHasFieldsEnclosedInQuotes": true,
        "CsvUploadSetWhiteSpaceToNull": true,
        //
        // $1 - row index (1-based), $2 - parsed value text array, $3 - result of previous row command, $4 - json metadata for upload
        //
        "CsvUploadRowCommand": "call process_csv_row($1,$2,$3,$4)",
        //
        // Enables upload handlers for the NpgsqlRest endpoints that uploads Excel files to a row command
        //
        "ExcelUploadEnabled": true,
        "ExcelKey": "excel",
        "ExcelSheetName": null, // null to use the first available
        "ExcelAllSheets": false,
        "ExcelTimeFormat": "HH:mm:ss",
        "ExcelDateFormat": "yyyy-MM-dd",
        "ExcelDateTimeFormat": "yyyy-MM-dd HH:mm:ss",
        "ExcelRowDataAsJson": false,
        //
        // $1 - row index (1-based), $2 - parsed value text array, $3 - result of previous row command, $4 - json metadata for upload
        //
        "ExcelUploadRowCommand": "call process_excel_row($1,$2,$3,$4)"
      }
    },

    //
    // Options for refresh metadata endpoint
    //
    "RefreshOptions": {
      //
      // Refresh metadata endpoint enabled
      //
      "Enabled": false,
      //
      // Refresh metadata endpoint path
      //
      "Path": "/api/npgsqlrest/refresh",
      //
      // Refresh metadata endpoint HTTP method
      //
      "Method": "GET"
    },

    //
    // Authentication options for NpgsqlRest endpoints
    //
    "AuthenticationOptions": {
      //
      // Authentication type used with the Login endpoints to set the authentication type for the new `ClaimsIdentity` created by the login. This value must be set to non-null when using login endpoints, otherwise, the following error will raise: `SignInAsync when principal.Identity.IsAuthenticated is false is not allowed when AuthenticationOptions.RequireAuthenticatedSignIn is true.` If the value is not set and the login endpoint is present, it will automatically get the database name from the connection string.
      //
      "DefaultAuthenticationType": null,
      //
      // The default column name in the data reader which will be used to read the value to determine the success or failure of the login operation. If this column is not present, the success is when the endpoint returns any records. If this column is present, it must be either a boolean to indicate success or a numeric value to indicate the HTTP Status Code to return. If this column is present and retrieves a numeric value, that value is assigned to the HTTP Status Code and the login will authenticate only when this value is 200.
      //
      "StatusColumnName": "status",
      //
      // The default column name in the data reader which will be used to read the value of the authentication scheme of the login process. If this column is not present in the login response the default authentication scheme is used. Return new value to use a different authentication scheme with the login endpoint.
      //
      "SchemeColumnName": "scheme",
      //
      // The default column name in the data reader which will return a text message with the login status.
      //
      "MessageColumnName": "message",
      //
      // Default claim type for user id.
      //
      "DefaultUserIdClaimType": "user_id",
      //
      // Default claim type for username.
      //
      "DefaultNameClaimType": "user_name",
      //
      // Default claim type for user roles.
      //
      "DefaultRoleClaimType": "user_roles",
      //
      // If true, return any response from auth endpoints (login and logout) if response hasn't been written by auth handler. For cookie auth, this will return full record to response as returned by the routine. For bearer token auth, this will be ignored because bearer token auth writes its own response (with tokens). This option will also be ignored if message column is present (see MessageColumnName option).
      //
      "SerializeAuthEndpointsResponse": false,
      //
      // Don't write real parameter values when logging parameters from auth endpoints and obfuscate instead. This prevents user credentials including password from ending up in application logs.
      //
      "ObfuscateAuthParameterLogValues": true,
      //
      // The default column name in the data reader which will be used to read the value of the hash of the password. If this column is present, the value will be used to verify the password from the password parameter. Password parameter is the first parameter which name contains the value of PasswordParameterNameContains. If verification fails, the login will fail and the HTTP Status Code will be set to 404 Not Found.
      //
      "HashColumnName": "hash",
      //
      // The default name of the password parameter. The first parameter which name contains this value will be used as the password parameter. This is used to verify the password from the password parameter when login endpoint returns a hash of the password (see HashColumnName).
      //
      "PasswordParameterNameContains": "pass",
      //
      // Command that is executed when the password verification fails. There are three text parameters: authentication scheme used for the login (if exists), user id used for the login (if exists), username used for the login (if exists). Please use PostgreSQL parameter placeholders for the parameters ($1, $2, $3).
      //
      "PasswordVerificationFailedCommand": null,
      //
      // Command that is executed when the password verification succeeds. There are three text parameters: authentication scheme used for the login (if exists), user id used for the login (if exists), username used for the login (if exists). Please use PostgreSQL parameter placeholders for the parameters ($1, $2, $3).
      //
      "PasswordVerificationSucceededCommand": null,
      //
      // Enable setting authenticated user claims to context variables automatically. See ContextKeyClaimsMapping and ClaimsJsonContextKey options. You can set this individually for each request by using UserContext endpoint property or user_context comment annotation.
      //
      "UseUserContext": false,
      //
      // Mapping of context keys to user claim names. Keys are the context variable names and values are the user claim names. When <see cref="UseUserContext"/> is enabled, the user claims from will be automatically mapped to the context variables.
      //
      "ContextKeyClaimsMapping": {
        "request.user_id": "user_id",
        "request.user_name": "user_name",
        "request.user_roles": "user_roles"
      },
      //
      // Context key that is used to set context variable for all available user claims. When this option is not null, and user is authenticated, the user claims will be serialized to JSON value and set to the context variable.
      //
      "ClaimsJsonContextKey": null,
      //
      // IP address context key that is used to set context variable for the IP address. When this option is not null, the IP address will be set to the context variable when <see cref="UseUserContext"/> is enabled and even when user is not authenticated.
      //
      "IpAddressContextKey": "request.ip_address",
      //
      // Enable mapping authenticated user claims to parameters by name automatically. See ParameterNameClaimsMapping and ClaimsJsonParameterName options. You can set this individually for each request by using UseUserParameters endpoint property or user_parameters comment annotation.
      //
      "UseUserParameters": false,
      //
      // Mapping of parameter names to user claim names. Keys are the parameter names and values are the user claim names. When <see cref="UseUserParameters"/> is enabled, the user claims from will be automatically mapped to the parameters.
      //
      "ParameterNameClaimsMapping": {
        "_user_id": "user_id",
        "_user_name": "user_name",
        "_user_roles": "user_roles"
      },
      //
      // Parameter name that is used to set value for all available user claims. When this option is not null, and user is authenticated, the user claims will be serialized to JSON value and set to the parameter with this name.
      //
      "ClaimsJsonParameterName": "_user_claims",
      //
      // IP address parameter name that is used to set parameter value for the IP address. When this option is not null, the IP address will be set to the parameter when <see cref="UseUserContext"/> is enabled and even when user is not authenticated.
      //
      "IpAddressParameterName": "_ip_address",
      //
      // Url path that will be used for the login endpoint. If NULL, the login endpoint will not be created.
      // Login endpoint expects a PostgreSQL command that will be executed to authenticate the user that follow this convention:
      //
      // - Must return at least one record when authentication is successful. If no records are returned endpoint will return 401 Unauthorized.
      // - If record is returned, the authentication is successful, if not set in StatusColumnName column otherwise.
      // - All records will be added to user principal claim collection where column name is claim type and column value is claim value, 
      //   except for three special columns defined in StatusColumnName, SchemeColumnName and MessageColumnName options:
      //
      // - If "StatusColumnName" is present in the returned record, it must be either boolean (true for success, false for failure) or numeric (HTTP Status Code, 200 for success, anything else for failure). If not present, the success is when the endpoint returns any records.
      // - If "SchemeColumnName" is present in the returned record, it must be text value that defines the authentication scheme to use for the login.
      // - If "MessageColumnName" is present in the returned record, it must be text value that defines the message to return to the client. This only works for authentication that doesn't write response body (cookie authentication).
      //
      "LoginPath": null,
      //
      // Url path that will be used for the logout endpoint. If NULL, the logout endpoint will not be created.
      // Login endpoint expects a PostgreSQL command that performs the logout or the sign-out operation.
      //
      // If the routine doesn't return any data, the default authorization scheme is signed out. 
      // Any values returned will be interpreted as scheme names (converted to string) to sign out.
      //
      "LogoutPath": null,
      //
      // Settings for basic authentication support.
      // Basic authentication is a simple authentication scheme built into the HTTP protocol.
      // It expects request header `Authorization: Basic base64(username:password)` where username and password are the credentials for the user.
      //
      "BasicAuth": {
        //
        // Enable or disable the Basic Authentication support.
        //
        "Enabled": false,
        //
        // The default realm for the Basic Authentication. If not set, "NpgsqlRest" will be used.
        //
        "Realm": null,
        //
        // The default user for the Basic Authentication for all endpoints. Can be set on individual endpoints. Realm will be used if not set.
        //
        "Username": null,
        //
        // The default password for the Basic Authentication for all endpoints. Can be set on individual endpoints.
        //
        "Password": null,
        //
        // Use default password hasher for Basic Authentication to verify the password when Password is set on endpoint or options.
        // When this is true, Password set in configuration, endpoint or header (depending on PasswordHashLocation) is expected to be a hashed with default hasher.
        //
        "UseDefaultPasswordHasher": true,
        //
        // When using default password hasher, this option sets where the password hash is located.
        // When set to Server, the password hash is expected to be set on the server side (in configuration or endpoint).
        // When set to Client, the password hash is expected to be sent by the client in the Basic Authentication header as the password.
        //
        "PasswordHashLocation": "Server", // Server, Client
        //
        // Use default data protection encryption for Basic Authentication to decrypt password sent by the Basic Authentication request header.
        // When this is true, middleware expects password in format `Authorization: Basic base64(username:password)` to be encrypted with default data protection encryption.
        // Note: use "npgsqlrest encrypted_basic_auth [username] [password]" command line to generate encrypted password in console using default data protection encryption.
        // See also: "DataProtection" configuration section.
        //
        "UseDefaultPasswordEncryptionOnClient": false,
        //
        // Use default data protection encryption for Basic Authentication to decrypt password configured on server side (configuratio or endpoint).
        // When this is true, Password in this configuration or endpoint (via comment annotation or otherwise) is expected to be encrypted with default data protection encryption.
        // Note: use "npgsqlrest encrypt [password]" command line to generate encrypted password in console using default data protection encryption.
        // See also: "DataProtection" configuration section.
        //
        "UseDefaultPasswordEncryptionOnServer": false,
        //
        // PostgreSQL command executed when the Basic Authentication is challenged. 
        // Same convention applies as with "LoginPath" command. 
        // Use this command to validate the username and password and/or return user claims.
        // 
        // Parameters:
        // - $1: username from basic authentication header (if exists)
        // - $2: password from basic authentication header (if exists)
        // - $3: basic authentication realm (if exists)
        // - $4: endpoint path (if exists)
        // Example: "select * from challenge_basic_auth($1, $2, $3, $4)"
        //
        "ChallengeCommand": null
      }
    },
    //
    // Enable or disable the generation of HTTP files for NpgsqlRest endpoints.
    // See more on HTTP files at: 
    // https://marketplace.visualstudio.com/items?itemName=humao.rest-client or 
    // https://learn.microsoft.com/en-us/aspnet/core/test/http-files?view=aspnetcore-8.0
    //
    "HttpFileOptions": {
      "Enabled": false,
      //
      // Options for HTTP file generation:
      // - File: Generate HTTP files in the file system.
      // - Endpoint: Generate Endpoint(s) with HTTP file(s) content.
      // - Both: Generate HTTP files in the file system and Endpoint(s) with HTTP file(s) content.
      //
      "Option": "File",
      //
      // File name. If not set, the database name will be used if connection string is set. 
      // If neither ConnectionString nor Name is set, the file name will be "npgsqlrest".
      //
      "Name": null,
      //
      // The pattern to use when generating file names. {0} is database name, {1} is schema suffix with underline when FileMode is set to Schema.
      // Use this property to set a custom file name.
      // .http extension will be added automatically.
      //
      "NamePattern": "{0}_{1}",
      //
      // Adds comment header to above request based on PostgreSQL routine.
      // - None: skip.
      // - Simple: Add name, parameters and return values to comment header. This default.
      // - Full: Add the entire routine code as comment header.
      //
      "CommentHeader": "Simple",
      //
      // When CommentHeader is set to Simple or Full, set to true to include routine comments in comment header.
      //
      "CommentHeaderIncludeComments": true,
      //
      // - Database: to create one http file for entire database.
      // - Schema: to create one http file for each schema.
      //
      "FileMode": "Schema",
      //
      // Set to true to overwrite existing files.
      //
      "FileOverwrite": true
    },
    //
    // Enable or disable the generation of TypeScript/Javascript client source code files for NpgsqlRest endpoints.
    //
    "ClientCodeGen": {
      "Enabled": false,
      //
      // File path for the generated code. Set to null to skip the code generation. Use {0} to set schema name when BySchema is true
      //
      "FilePath": null,
      //
      //  Force file overwrite.
      //
      "FileOverwrite": true,
      //
      // Include current host information in the URL prefix.
      //
      "IncludeHost": true,
      //
      // Set the custom host prefix information.
      //
      "CustomHost": null,
      //
      // Adds comment header to above request based on PostgreSQL routine
      // Set None to skip.
      // Set Simple (default) to add name, parameters and return values to comment header.
      // Set Full to add the entire routine code as comment header.
      //
      "CommentHeader": "Simple",
      //
      // When CommentHeader is set to Simple or Full, set to true to include routine comments in comment header.
      //
      "CommentHeaderIncludeComments": true,
      //
      // Create files by PostgreSQL schema. File name will use formatted FilePath where {0} is the schema name in pascal case.
      //
      "BySchema": true,
      //
      // Set to true to include status code in response: {status: response.status, response: model}
      //
      "IncludeStatusCode": true,
      //
      // Create separate file with global types {name}Types.d.ts
      //
      "CreateSeparateTypeFile": true,
      //
      // Module name to import "baseUrl" constant, instead of defining it in a module.
      //
      "ImportBaseUrlFrom": null,
      //
      // Module name to import "parseQuery" function, instead of defining it in a module.
      //
      "ImportParseQueryFrom": null,
      //
      // Include optional parameter `parseUrl: (url: string) => string = url=>url` that will parse the constructed URL.
      //
      "IncludeParseUrlParam": false,
      //
      // Include optional parameter `parseRequest: (request: RequestInit) => RequestInit = request=>request` that will parse the constructed request.
      //
      "IncludeParseRequestParam": false,
      //
      // Header lines on each auto-generated source file. Default is ["// autogenerated at {0}", "", ""] where {0} is the current timestamp.
      //
      "HeaderLines": [
        "// autogenerated at {0}",
        ""
      ],
      //
      // Array of routine names to skip (without schema)
      //
      "SkipRoutineNames": [],
      //
      // Array of generated function names to skip (without schema)
      //
      "SkipFunctionNames": [],
      //
      // Array of url paths to skip
      //
      "SkipPaths": [],
      //
      // Array of schema names to skip
      //
      "SkipSchemas": [],
      //
      // Default TypeScript type for JSON types
      //
      "DefaultJsonType": "string",
      //
      // Use routine name instead of endpoint name when generating function names.
      //
      "UseRoutineNameInsteadOfEndpoint": false,
      //
      // Export URLs as constants in the generated code.
      //
      "ExportUrls": false,
      //
      // Skip generating types and produce pure JavaScript code. Setting this to true will also change the .ts extension to .js where applicable.
      //
      "SkipTypes": false,
      //
      // Keep TypeScript models unique, meaning models with the same fields and types will be merged into one model with the name of the last model. This significantly reduces the number of generated models.
      //
      "UniqueModels": false,
      //
      // Name of the XSRF Token Header (Anti-forgery Token). This is used in FORM POSTS to the server when Anti-forgery is enabled. Currently, only Upload requests use FORM POST.
      //
      "XsrfTokenHeaderName": null,
      //
      // Export event sources create functions for streaming events.
      //
      "ExportEventSources": true,
      //
      // List of custom imports to add to the generated code. It adds line to a file. Use full expression like `import { MyType } from './my-type';`
      //
      "CustomImports": [],
      //
      // Dictionary of custom headers to add to each request in generated code. Header key is automatically quoted if it doesn't contain quotes.
      //
      "CustomHeaders": {}
    },

    //
    // CRUD endpoints for the PostgreSQL tables and views.
    //
    "CrudSource": {
      //
      // Enable or disable the creation of the endpoints for the PostgreSQL tables and views.
      //
      "Enabled": true,
      //
      // Filter schema names similar to this parameter or `null` to ignore this parameter.
      //
      "SchemaSimilarTo": null,
      //
      // Filter schema names NOT similar to this parameter or `null` to ignore this parameter.
      //
      "SchemaNotSimilarTo": null,
      //
      // List of schema names to be included or `null` to ignore this parameter.
      //
      "IncludeSchemas": null,
      //
      // List of schema names to be excluded or `null` to ignore this parameter.
      //
      "ExcludeSchemas": null,
      //
      // Filter names similar to this parameter or `null` to ignore this parameter.
      //
      "NameSimilarTo": null,
      //
      // Filter names NOT similar to this parameter or `null` to ignore this parameter.
      //
      "NameNotSimilarTo": null,
      //
      // List of names to be included or `null` to ignore this parameter.
      //
      "IncludeNames": null,
      //
      // List of names to be excluded or `null` to ignore this parameter.
      //
      "ExcludeNames": null,
      //
      // Configure how the comment annotations will behave. `Ignore` will create all endpoints and ignore comment annotations. `ParseAll` will create all endpoints and parse comment annotations to alter the endpoint. `OnlyWithHttpTag` (default) will only create endpoints that contain the `HTTP` tag in the comments and then parse comment annotations.
      //
      "CommentsMode": "OnlyWithHttpTag",
      //
      // URL pattern for all "returning" endpoints. Parameter is the original URL. Parameter placeholder {0} is default URL.
      //
      "ReturningUrlPattern": "{0}/returning",
      //
      // URL pattern for all "do nothing" endpoints. Parameter is the original URL. Parameter placeholder {0} is default URL.
      //
      "OnConflictDoNothingUrlPattern": "{0}/on-conflict-do-nothing",
      //
      // URL pattern for all "do nothing returning " endpoints. Parameter is the original URL. Parameter placeholder {0} is default URL.
      //
      "OnConflictDoNothingReturningUrlPattern": "{0}/on-conflict-do-nothing/returning",
      //
      // URL pattern for all "do update" endpoints. Parameter is the original URL. Parameter placeholder {0} is default URL.
      //
      "OnConflictDoUpdateUrlPattern": "{0}/on-conflict-do-update",
      //
      // URL pattern for all "do update returning" endpoints. Parameter is the original URL. Parameter placeholder {0} is default URL.
      //
      "OnConflictDoUpdateReturningUrlPattern": "{0}/on-conflict-do-update/returning",
      //
      // Set of flags to enable or disable the creation of the CRUD endpoints for the specific types of the PostgreSQL tables and views. 
      //
      // Possible values are: 
      // Select, Update, UpdateReturning, Insert, InsertReturning, InsertOnConflictDoNothing, InsertOnConflictDoUpdate, InsertOnConflictDoNothingReturning, 
      // InsertOnConflictDoUpdateReturning, Delete, DeleteReturning, All
      //
      "CrudTypes": [
        "All"
      ]
    }
  }
}
